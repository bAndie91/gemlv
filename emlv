#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import os
import sys
import traceback
import locale
import gettext
from gemlv.sysutils import warnx
try:
	import better_exchook
except ImportError:
	pass
else:
	better_exchook.install()
import email
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email.mime.message import MIMEMessage
from gemlv.contenttypestring import ContentTypeString
import gemlv.email
import re
from tempfile import mkstemp
from tempfile import mkdtemp
from mimetypes import guess_extension
import magic
import argparse
import time
try:
	import setproctitle
except ImportError:
	warnx("No module named setproctitle. Degrading.")
	class setproctitle(object):
		@classmethod
		def setproctitle(self, *x, **kv):
			pass
import xdg.BaseDirectory
from gemlv.utils import AddressLine
from gemlv.utils import getaddresslines
from gemlv.utils import decode_mimetext
from gemlv.mimetext import MimeDecoded
from gemlv.mimetext import MimeEncoded
import gemlv.addressbook
from gemlv.constants import *
import gemlv.mime as mime
from gemlv.textutils import human_size





def td_esc_cb(m):
	return repr(m.group(0)).replace('\'', '')

def td_esc(s):
	return re.sub(r'[\t\n\r]', td_esc_cb, s)

def list_mime_parts(eml, input_file_index):
	for part_idx, eml in walk_mime_parts(eml, input_file_index):
		size = human_size(eml.size_decoded_approx)
		print '\t'.join([part_idx, eml.content_type, size, td_esc(eml.filename), td_esc(eml.header['Content-Description'].decoded)])

def display_headers(eml):
	for hname in CommonUserInterestedHeaders:
		hval = eml.header[hname].decoded
		if hval:
			hval = hval.strip()
			hval = hval.replace('\n', '\n\t')
			print hname+': '+hval

def display(eml):
	if eml.is_multipart():
		print eml.preamble
		print eml.epilogue
	else:
		# TODO consider get_content_readably()
		print eml.payload_decoded
	
	# TODO support filters

def load_email(filepath):
	return gemlv.email.Email(email.message_from_file(open(filepath, 'r')))

def walk_mime_parts(eml, idx):
	yield (idx, eml)
	for part_idx, part in enumerate(eml.parts):
		for x in walk_mime_parts(part, '%s.%d' % (idx, part_idx)):
			yield x




argparser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
argp_mxgroup = argparser.add_mutually_exclusive_group()
argp_mxgroup.add_argument('--list', '-l', action='store_true', help="List all MIME parts in FILE(s) (RFC-822) email file(s).")
argp_mxgroup.add_argument('--extract', '-x', action='append', metavar='INDEX', help="Extract MIME part(s) specified by INDEX to stdout.")
argparser.add_argument('--no-header', '-H', '--body-only', '-b', action='store_true', dest='noheader', help="Don't show common headers when extracting, only the message payload.")
argparser.add_argument('FILE', nargs='*', help="Process the given FILE(s). Read STDIN if FILE is not given.")
cliArgs = argparser.parse_args(args=sys.argv[1:])

if cliArgs.extract:
	cliArgs.noheader = True

if not cliArgs.FILE:
	cliArgs.FILE.append('/dev/stdin')

if not cliArgs.list and not cliArgs.extract:
	# read primary part mode
	cliArgs.extract = []
	for input_file_index, filename in enumerate(cliArgs.FILE):
		cliArgs.extract.append('%d.primary' % input_file_index)


if cliArgs.list:
	print "INDEX	MIME_TYPE	SIZE	FILENAME	DESCRIPTION"
	for idx, filename in enumerate(cliArgs.FILE):
		eml = load_email(filename)
		list_mime_parts(eml, str(idx))

else:
	for idx in cliArgs.extract:
		indices = idx.split('.')
		input_file_index = int(indices[0])
		eml = load_email(cliArgs.FILE[input_file_index])
		part = eml
		
		if indices[1] == 'primary':
			mime_part_indices = []
			for part_idx, sub_part in walk_mime_parts(part, str(input_file_index)):
				if sub_part.content_type in ['text/plain']:
					mime_part_indices = part_idx.split('.')[1:]
					break
		else:
			mime_part_indices = indices[1:]
		
		for part_idx in map(int, mime_part_indices):
			part = part.parts[part_idx]
		
		if not cliArgs.noheader:
			display_headers(eml)
			print ""
		display(part)
